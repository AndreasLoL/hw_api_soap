
package soap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.rethinkdb.RethinkDB;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Endpoint;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.List;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.7-b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "TwitterPortType", targetNamespace = "http://veebiteenused.ttu.ee")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ObjectFactory.class
})
public class TwitterPortType {


    public static final RethinkDB r = RethinkDB.r;
    public static Connection conn;
    public List<String> tokens;
    public Gson gson;

    public TwitterPortType() {
        conn = r.connection().hostname("localhost").port(28015).connect();
        tokens = new ArrayList<>(Arrays.asList("asd123", "abc123", "qwerty"));
        gson = new GsonBuilder()
                .registerTypeAdapter(XMLGregorianCalendar.class, new XMLGregorianCalendarConverter.Deserializer())
                .registerTypeAdapter(XMLGregorianCalendar.class, new XMLGregorianCalendarConverter.Serializer())
                .create();
    }

    /**
     * 
     * @param parameter
     * @return
     *     returns soap.Tweet
     */
    @WebMethod(operationName = "GetTweet")
    @WebResult(name = "GetTweetResponse", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
    public Tweet getTweet(
        @WebParam(name = "GetTweetRequest", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
        GetTweetRequest parameter) {

        if (tokenIsValid(parameter.getToken())) {
            Cursor c = r.db("twitter").table("tweet").filter(r.hashMap("id", parameter.getID())).run(conn);
            for (Object tweet : c) {
                JsonElement jsonElement = gson.toJsonTree(tweet);
                return gson.fromJson(jsonElement, Tweet.class);
            }
        }
        return null;
    }

    private boolean tokenIsValid(String token) {
        return tokens.contains(token);
    }

    /**
     * 
     * @param parameter
     * @return
     *     returns soap.Tweet
     */
    @WebMethod(operationName = "AddTweet")
    @WebResult(name = "AddTweetResponse", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
    public Tweet addTweet(
        @WebParam(name = "AddTweetRequest", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
        AddTweetRequest parameter) {
        //User: 83b33b97-a449-42d2-a36b-7bab1201b014


        if (tokenIsValid(parameter.getToken())) {
            r.db("twitter").table("tweet").insert(r.array(
                    r.hashMap("message", parameter.getMessage())
                            .with("ownerID", parameter.getOwnerID())
                            .with("creationDate", getCurrentDate().toString())
            )).run(conn);

            Tweet tweet = new Tweet();
            tweet.setCreationDate(getCurrentDate());
            tweet.setMessage(parameter.getMessage());
            tweet.setOwnerID(parameter.getOwnerID());
            return tweet;
        }

        return null;
    }

    private XMLGregorianCalendar getCurrentDate() {
        try {
            GregorianCalendar gregorianCalendar = new GregorianCalendar();
            DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
            XMLGregorianCalendar now =
                    datatypeFactory.newXMLGregorianCalendar(gregorianCalendar);
            return now;
        } catch (DatatypeConfigurationException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 
     * @param parameter
     * @return
     *     returns soap.Comment
     */
    @WebMethod(operationName = "GetComment")
    @WebResult(name = "GetCommentResponse", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
    public Comment getComment(
        @WebParam(name = "GetCommentRequest", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
        GetCommentRequest parameter) {

        if (tokenIsValid(parameter.getToken())) {
            Cursor c = r.db("twitter").table("comment").filter(r.hashMap("id", parameter.getCommentID())).run(conn);
            for (Object comment : c) {
                JsonElement jsonElement = gson.toJsonTree(comment);
                return gson.fromJson(jsonElement, Comment.class);
            }
        }
        return null;
    }

    /**
     * 
     * @param parameter
     * @return
     *     returns soap.GetTweetsResponse
     */
    @WebMethod(operationName = "GetTweets")
    @WebResult(name = "GetTweetsResponse", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
    public GetTweetsResponse getTweets(
        @WebParam(name = "GetTweetsRequest", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
        GetTweetsRequest parameter) {

        if (tokenIsValid(parameter.getToken())) {
            List<Tweet> tweets = new ArrayList<>();
            Cursor c = r.db("twitter").table("tweet").run(conn);
            for (Object comment : c) {
                JsonElement jsonElement = gson.toJsonTree(comment);
                tweets.add(gson.fromJson(jsonElement, Tweet.class));
            }
            GetTweetsResponse response = new GetTweetsResponse();
            response.tweets = tweets;
            return response;
        }

        return null;
    }

    /**
     * 
     * @param parameter
     * @return
     *     returns soap.GetCommentsResponse
     */
    @WebMethod(operationName = "GetComments")
    @WebResult(name = "GetCommentsResponse", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
    public GetCommentsResponse getComments(
        @WebParam(name = "GetCommentsRequest", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
        GetCommentsRequest parameter) {

        if (tokenIsValid(parameter.getToken())) {
            List<Comment> comments = new ArrayList<>();
            Cursor c = r.db("twitter").table("comment").filter(r.hashMap("ownerID", parameter.getUserID())).run(conn);

            for (Object comment : c) {
                JsonElement jsonElement = gson.toJsonTree(comment);
                comments.add(gson.fromJson(jsonElement, Comment.class));
            }
            GetCommentsResponse response = new GetCommentsResponse();
            response.comments.comment = comments;
            return response;
        }

        return null;
    }

    /**
     * 
     * @param parameter
     * @return
     *     returns soap.TweetWithComments
     */
    @WebMethod(operationName = "AddCommentToTweet")
    @WebResult(name = "AddCommentToTweetResponse", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
    public TweetWithComments addCommentToTweet(
        @WebParam(name = "AddCommentToTweetRequest", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
        AddCommentToTweetRequest parameter) {
        if (tokenIsValid(parameter.getToken())) {
            r.db("twitter").table("comment").insert(r.array(
                    r.hashMap("message", parameter.getMessage())
                            .with("ownerID", parameter.getOwnerID())
                            .with("creationDate", getCurrentDate().toString())
                    .with("tweetID", parameter.getTweetID())
            )).run(conn);


            GetTweetRequest getTweetRequest = new GetTweetRequest();
            getTweetRequest.setID(parameter.getTweetID());
            getTweetRequest.setToken(parameter.getToken());
            Tweet tweet = getTweet(getTweetRequest);

            List<Comment> comments = new ArrayList<>();
            Cursor c = r.db("twitter").table("comment").filter(r.hashMap("tweetID", parameter.getTweetID())).run(conn);

            for (Object comment : c) {
                JsonElement jsonElement = gson.toJsonTree(comment);
                comments.add(gson.fromJson(jsonElement, Comment.class));
            }

            TweetWithComments tweetWithComments = new TweetWithComments();
            tweetWithComments.comments = new TweetWithComments.Comments();
            tweetWithComments.comments.comment = comments;
            tweetWithComments.creationDate = tweet.getCreationDate();
            tweetWithComments.message = tweet.getMessage();
            tweetWithComments.ownerID = tweet.getOwnerID();
            tweetWithComments.id = tweet.getID();

            return tweetWithComments;
        }

        return null;
    }

    /**
     * 
     * @param parameter
     * @return
     *     returns soap.TweetWithComments
     */
    @WebMethod(operationName = "GetTweetComments")
    @WebResult(name = "GetTweetCommentsResponse", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
    public TweetWithComments getTweetComments(
        @WebParam(name = "GetTweetCommentsRequest", targetNamespace = "http://veebiteenused.ttu.ee", partName = "parameter")
        GetTweetCommentsRequest parameter) {

        if (tokenIsValid(parameter.getToken())) {
            GetTweetRequest getTweetRequest = new GetTweetRequest();
            getTweetRequest.setID(parameter.getTweetID());
            getTweetRequest.setToken(parameter.getToken());
            Tweet tweet = getTweet(getTweetRequest);

            List<Comment> comments = new ArrayList<>();
            Cursor c = r.db("twitter").table("comment").filter(r.hashMap("tweetID", parameter.getTweetID())).run(conn);

            for (Object comment : c) {
                JsonElement jsonElement = gson.toJsonTree(comment);
                comments.add(gson.fromJson(jsonElement, Comment.class));
            }

            TweetWithComments tweetWithComments = new TweetWithComments();
            tweetWithComments.comments = new TweetWithComments.Comments();
            tweetWithComments.comments.comment = comments;
            tweetWithComments.creationDate = tweet.getCreationDate();
            tweetWithComments.message = tweet.getMessage();
            tweetWithComments.ownerID = tweet.getOwnerID();
            tweetWithComments.id = tweet.getID();

            return tweetWithComments;
        }

        return null;
    }

    public static void main(String[] args) {
        Object implementor = new TwitterPortType();
        String address = "http://localhost:9000/HelloWorld";
        Endpoint.publish(address, implementor);
    }

}
